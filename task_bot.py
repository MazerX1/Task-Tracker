import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
import os
from dotenv import load_dotenv

# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# =========================
# –ó–ê–ì–†–£–ó–ö–ê –¢–û–ö–ï–ù–ê
# =========================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# =========================
# –°–¢–ê–¢–£–°–´ –ö–û–ù–í–ï–†–°–ê–¶–ò–ò
# =========================
CATEGORY, TASK_NAME, DEADLINE = range(3)

# =========================
# –ö–ê–¢–ï–ì–û–†–ò–ò
# =========================
CATEGORIES = ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"]


# =========================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =========================
def init_db():
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            local_id INTEGER NOT NULL,
            category TEXT,
            task_name TEXT NOT NULL,
            deadline TEXT,
            completed INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()


# =========================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# =========================
MAIN_MENU = [
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"],
    ["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"]
]


def get_main_menu():
    return ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)


# =========================
# –ö–û–ú–ê–ù–î–ê /start
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand("mytasks", "–ú–æ–∏ –∑–∞–¥–∞—á–∏"),
        BotCommand("completed", "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    ])

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Task Tracker.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )


# =========================
# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò
# =========================
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
    return CATEGORY


async def add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['category'] = query.data
    await query.answer()
    await query.edit_message_text("‚úç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return TASK_NAME


async def add_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_name'] = update.message.text
    await update.message.reply_text(
        "‚è∞ –£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–∑–∞–≤—Ç—Ä–∞', –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º:"
    )
    return DEADLINE


async def add_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    category = context.user_data['category']
    task_name = context.user_data['task_name']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    if text.lower() == "–∑–∞–≤—Ç—Ä–∞":
        deadline = (datetime.now() + timedelta(days=1)).isoformat()
    else:
        try:
            deadline = datetime.strptime(text, "%d.%m.%Y %H:%M").isoformat()
        except ValueError:
            deadline = None

    user_id = update.effective_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id=?", (user_id,))
    task_count = cursor.fetchone()[0]
    local_id = task_count + 1

    cursor.execute(
        "INSERT INTO tasks (user_id, local_id, category, task_name, deadline) VALUES (?, ?, ?, ?, ?)",
        (user_id, local_id, category, task_name, deadline)
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_name} ({category})", reply_markup=get_main_menu())
    return ConversationHandler.END


async def add_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END


# =========================
# –ú–û–ò –ó–ê–î–ê–ß–ò
# =========================
async def mytasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, local_id, category, task_name, deadline FROM tasks WHERE user_id=? AND completed=0 ORDER BY local_id",
        (user_id,)
    )
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=get_main_menu())
        return

    for task_id, local_id, category, task_name, deadline in tasks:
        deadline_str = datetime.fromisoformat(deadline).strftime("%d.%m.%Y %H:%M") if deadline else "‚Äì"
        text = f"üìå <b>#{local_id} {task_name}</b>\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}"

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")


# =========================
# –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò
# =========================
async def completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, local_id, category, task_name, completed_at FROM tasks WHERE user_id=? AND completed=1 ORDER BY local_id",
        (user_id,)
    )
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=get_main_menu())
        return

    for task_id, local_id, category, task_name, completed_at in tasks:
        completed_str = datetime.fromisoformat(completed_at).strftime("%d.%m.%Y %H:%M") if completed_at else "‚Äì"
        text = f"‚úÖ <b>#{local_id} {task_name}</b>\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_str}"

        keyboard = [
            [
                InlineKeyboardButton("‚Ü© –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data=f"restore_{task_id}"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")


# =========================
# –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö
# =========================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()

    if data.startswith("done_"):
        task_id = int(data.split("_")[1])
        cursor.execute(
            "UPDATE tasks SET completed=1, completed_at=CURRENT_TIMESTAMP WHERE id=? AND user_id=?",
            (task_id, user_id),
        )
        conn.commit()
        await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", reply_markup=None)

    elif data.startswith("delete_"):
        task_id = int(data.split("_")[1])
        cursor.execute("DELETE FROM tasks WHERE id=? AND user_id=?", (task_id, user_id))
        conn.commit()

        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM tasks WHERE user_id=? ORDER BY created_at", (user_id,))
        remaining = cursor.fetchall()
        for idx, (r_id,) in enumerate(remaining, start=1):
            cursor.execute("UPDATE tasks SET local_id=? WHERE id=?", (idx, r_id))
        conn.commit()
        await query.edit_message_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=None)

    elif data.startswith("restore_"):
        task_id = int(data.split("_")[1])
        cursor.execute("UPDATE tasks SET completed=0, completed_at=NULL WHERE id=? AND user_id=?", (task_id, user_id))
        conn.commit()
        await query.edit_message_text("‚Ü© –ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ!", reply_markup=None)

    conn.close()


# =========================
# –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (ReplyKeyboard)
# =========================
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        return await add_start(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        return await mytasks(update, context)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
        return await completed(update, context)


# =========================
# MAIN
# =========================
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –ö–æ–Ω–≤–µ–π–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_start),
                      CallbackQueryHandler(add_start, pattern="^add$")],
        states={
            CATEGORY: [CallbackQueryHandler(add_category, pattern="|".join(CATEGORIES))],
            TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_name)],
            DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_deadline)],
        },
        fallbacks=[CommandHandler("cancel", add_cancel)],
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é ReplyKeyboard
    app.add_handler(MessageHandler(filters.Regex("^(üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)$"), menu_handler))

    # Inline-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(done_|delete_|restore_)"))

    app.run_polling()


if __name__ == "__main__":
    main()
